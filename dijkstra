"The sterile pleasure of being right tends to get stale in the course of a lifetime." -- EW Dijkstra
%
"At the time this is written the testing has not yet been completed, but the resulting system is guaranteed to be flawless" -- Dijkstra'68
%
"For a number of years I have been familiar with the observation that the quality of programmers is a decreasing function of the density of go to statements in the programs they produce. More recently I discovered why the use of the go to statement has such disastrous effects, and I became convinced that the go to statement should be abolished from all "higher level" programming languages." -- Dijkstra (1968)
%
"Our intellectual powers are rather geared to master static relations and that our powers to visualize processes evolving in time are relatively poorly developed. For that reason we should do (as wise programmers aware of our limitations) our utmost to shorten the conceptual gap between the static program and the dynamic process, to make the correspondence between the program (spread out in text space) and the process (spread out in time) as trivial as possible." -- Dijkstra (1968, "A Case against the GO TO Statement")
%
"Testing shows the presence, not the absence of bugs" -- Dijkstra (1970, "Software Engineering Techniques", April 1970, p. 16.)
%
"A convincing demonstration of correctness being impossible as long as the mechanism is regarded as a black box, our only hope lies in not regarding the mechanism as a black box." -- Dijkstra (1970s, EWD249)
%
"The art of programming is the art of organizing complexity, of mastering multitude and avoiding its bastard chaos as effectively as possible." -- Dijkstra (1970s, EWD249)
%
"The competent programmer is fully aware of the strictly limited size of his own skull; therefore he approaches the programming task in full humility, and among other things he avoids clever tricks like the plague." -- Dijkstra (1970s, EWD340)
%
"Don't blame me for the fact that competent programming, as I view it as an intellectual possibility, will be too difficult for "the average programmer" â€” you must not fall into the trap of rejecting a surgical technique because it is beyond the capabilities of the barber in his shop around the corner." -- Dijkstra (1970s, EWD512)
%
"Several people have told me that my inability to suffer fools gladly is one of my main weaknesses." -- Dijkstra (1970s, EWD690)
%
"Write a paper promising salvation, make it a 'structured' something or a 'virtual' something, or 'abstract', 'distributed' or 'higher-order' or 'applicative' and you can almost be certain of having started a new cult." -- Dijkstra (1970s, EWD709)
%
"For me, the first challenge for computing science is to discover how to maintain order in a finite, but very large, discrete universe that is intricately intertwined. And a second, but not less important challenge is how to mould what you have achieved in solving the first problem, into a teachable discipline: it does not suffice to hone your own intellect (that will join you in your grave), you must teach others how to hone theirs. The more you concentrate on these two challenges, the clearer you will see that they are only two sides of the same coin: teaching yourself is discovering what is teachable." -- Dijkstra (1970s, EWD709)
%
"We must be very careful when we give advice to younger people: sometimes they follow it!" -- Dijkstra (1970s, 1972 Turing Award Lecture)
%
"The major cause [of the software crisis] is that the machines have become several orders of magnitude more powerful! To put it quite bluntly: as long as there were no machines, programming was no problem at all; when we had a few weak computers, programming became a mild problem, and now we have gigantic computers, programming has become an equally gigantic problem. In this sense the electronic industry has not solved a single problem, it has only created them, it has created the problem of using its products." -- Dijkstra (1970s, 1972 Turing Award Lecture)
%
"FORTRAN's tragic fate has been its wide acceptance, mentally chaining thousands and thousands of programmers to our past mistakes." -- Dijkstra (1970s, 1972 Turing Award Lecture)
%
"LISP has been jokingly described as "the most intelligent way to misuse a computer". I think that description a great compliment because it transmits the full flavor of liberation: it has assisted a number of our most gifted fellow humans in thinking previously impossible thoughts." -- Dijkstra (1970s, 1972 Turing Award Lecture)
%
"If you want more effective programmers, you will discover that they should not waste their time debugging, they should not introduce the bugs to start with." -- Dijkstra (1970s, 1972 Turing Award Lecture)
%
"The effective exploitation of his powers of abstraction must be regarded as one of the most vital activities of a competent programmer." -- Dijkstra (1970s, 1972 Turing Award Lecture)
%
"The use of COBOL cripples the mind; its teaching should, therefore, be regarded as a criminal offense." -- Dijkstra (1975, EWD498)
%
"In the good old days physicists repeated each other's experiments, just to be sure. Today they stick to FORTRAN, so that they can share each other's programs, bugs included." -- Dijkstra (1975, EWD498)
%
"It is practically impossible to teach good programming to students that have had a prior exposure to BASIC: as potential programmers they are mentally mutilated beyond hope of regeneration." -- Dijkstra (1975, EWD498)
%
"Simplicity is prerequisite for reliability." -- Dijkstra (1975, EWD498)
%
"Programming is one of the most difficult branches of applied mathematics; the poorer mathematicians had better remain pure mathematicians." -- Dijkstra (1975, EWD498)
%
"About the use of language: it is impossible to sharpen a pencil with a blunt axe. It is equally vain to try to do it with ten blunt axes instead." -- Dijkstra (1975, EWD498)
%
"Thank goodness we don't have only serious problems, but ridiculous ones as well." -- Dijkstra (1980s, EWD475)
%
"The question of whether Machines Can Think... is about as relevant as the question of whether Submarines Can Swim." -- Dijkstra (1980s, EWD898)
%
"Simplicity is a great virtue but it requires hard work to achieve it and education to appreciate it. And to make matters worse: complexity sells better." -- Dijkstra (1980s, EWD898)
%
"Probably I am very naive, but I also think I prefer to remain so, at least for the time being and perhaps for the rest of my life." -- Dijkstra (1980s, EWD923A)
%
"I mean, if 10 years from now, when you are doing something quick and dirty, you suddenly visualize that I am looking over your shoulders and say to yourself "Dijkstra would not have liked this", well, that would be enough immortality for me." -- Dijkstra (1995, EWD1213)
%
"Elegance is not a dispensable luxury but a quality that decides between success and failure." -- Dijkstra (1990s, EWD1284)
%
"Industry suffers from the managerial dogma that for the sake of stability and continuity, the company should be independent of the competence of individual employees. Hence industry rejects any methodological proposal that can be viewed as making intellectual demands on its work force. Since in the US the influence of industry is more pervasive than elsewhere, the above dogma hurts American computing science most. The moral of this sad part of the story is that as long as computing science is not allowed to save the computer industry, we had better see to it that the computer industry does not kill computing science." -- Dijkstra (1999, EWD1284)
%
If we wish to count lines of code, we should not regard them as "lines produced" but as "lines spent". - Edsger Dijkstra
%
The tools we use have a profound (and devious!) influence on our thinking habits, and, therefore, on our thinking abilities. - Edsger Dijkstra
%
Computer Science is no more about computers than astronomy is about telescopes. - Edsger Dijkstra
%
Do only what only you can do. - Edsger Dijkstra
%
I pray daily that more of my fellow programmers may find the means of freeing themselves from the curse of compatibility. - Edsger Dijkstra - 1972, Turing award lecture
%
Progress is possible only if we train ourselves to think about programs without thinking of them as pieces of executable code. - Edsger Dijkstra - August 23, 1979
%
Object-oriented programming is an exceptionally bad idea that could only have been invented in California. - Edsger Dijkstra
%
Projects promoting programming in "natural language" are intrinsically doomed to fail. - Edsger Dijkstra - How do we tell truths that might hurt?
%
Teaching to unsuspecting youngsters the effective use of formal methods is one of the joys of life because it is so extremely rewarding. - Edsger Dijkstra
%
Don't compete with me: firstly, I have more experience, and secondly, I have chosen the weapons. - Edsger Dijkstra
%
The lurking suspicion that something could be simplified is the world's richest source of rewarding challenges. - Edsger Dijkstra
%
Aim for brevity while avoiding jargon. - Edsger Dijkstra
%
Perfecting oneself is as much unlearning as it is learning. - Edsger Dijkstra
%
